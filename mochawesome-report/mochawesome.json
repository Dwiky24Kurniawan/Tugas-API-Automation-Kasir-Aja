{
  "stats": {
    "suites": 7,
    "tests": 39,
    "passes": 39,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-28T04:04:50.713Z",
    "end": "2023-06-28T04:05:13.771Z",
    "duration": 23058,
    "testsRegistered": 39,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e44a1062-ec39-4656-80a0-1672efa3b4fe",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 422,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "request(baseUrl)\n    .post('/authentications')\n    .send(userLogin)\n    .end(function (err, res) {\n        token = res.body.data.accessToken\n        if (err) {\n            throw err\n        }\n        done()\n    })",
          "err": {},
          "uuid": "c041f4c4-0922-4fc1-a03f-37650fd8d272",
          "parentUUID": "e44a1062-ec39-4656-80a0-1672efa3b4fe",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bbc643fd-a135-48d6-a9c4-19a831663d34",
          "title": "Test Endpoint Registration /registration and Login /authentications",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success create user registration",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Success create user registration",
              "timedOut": false,
              "duration": 439,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/registration')\n    .send(userRegistration)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Toko berhasil didaftarkan')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(userRegistration.name)\n        expect(await response.body.data.email).not.to.be.null\n        expect(await response.body.data.email).to.be.equal(userRegistration.email)\n        expect(await response.body.data.password).not.to.be.null\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "029f6c8f-d53a-41ef-9aeb-21ce44f61d10",
              "parentUUID": "bbc643fd-a135-48d6-a9c4-19a831663d34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success login using valid credential",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Success login using valid credential",
              "timedOut": false,
              "duration": 419,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/authentications')\n    .send(userLogin)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Authentication berhasil ditambahkan')\n        expect(await response.body.data.accessToken).not.to.be.null\n        expect(await response.body.data.refreshToken).not.to.be.null\n        expect(await response.body.data.user.id).not.to.be.null\n        expect(await response.body.data.user.name).not.to.be.null\n        expect(await response.body.data.user.name).to.be.equal(userRegistration.name)\n        expect(await response.body.data.user.role).not.to.be.null\n        expect(await response.body.data.user.role).to.be.equal('admin')\n        expect(await response.body.data.user.email).not.to.be.null\n        expect(await response.body.data.user.email).to.be.equal(userRegistration.email)\n        expect(await response.body.data.user.company_name).not.to.be.null\n        expect(await response.body.data.user.company_name).to.be.equal(userRegistration.name)\n        officeId = response.body.data.user.officeId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "be850008-bb6e-4ca2-b86e-2e61f60cddeb",
              "parentUUID": "bbc643fd-a135-48d6-a9c4-19a831663d34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed login using invalid credential",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Failed login using invalid credential",
              "timedOut": false,
              "duration": 196,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/authentications')\n    .send({\n        \"email\": \"tokonya@dwiky.com\",\n        \"password\": \"tokonyadwiky\"\n    })\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(401)\n        expect(await response.body.status).to.be.equal('fail')\n        expect(await response.body.message).to.be.equal('Kredensial yang Anda berikan salah')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "c18c14a5-2e59-477a-aaa2-7aa5e1e32725",
              "parentUUID": "bbc643fd-a135-48d6-a9c4-19a831663d34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed login using invalid email format",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Failed login using invalid email format",
              "timedOut": false,
              "duration": 145,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/authentications')\n    .send({\n        \"email\": \"toko@dwiky\",\n        \"password\": \"toko24dwiky\"\n    })\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(400)\n        expect(await response.body.status).to.be.equal('fail')\n        expect(await response.body.message).to.be.equal('\\\"email\\\" must be a valid email')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "5c1927b3-b15a-4442-b425-26d39d2b78b4",
              "parentUUID": "bbc643fd-a135-48d6-a9c4-19a831663d34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed login without any input",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Failed login without any input",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/authentications')\n    .send()\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(400)\n        expect(await response.body.status).to.be.equal('fail')\n        expect(await response.body.message).to.be.equal('\\\"value\\\" must be of type object')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "f651cfa2-9f5d-4178-8406-c60f1c98f6b2",
              "parentUUID": "bbc643fd-a135-48d6-a9c4-19a831663d34",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "029f6c8f-d53a-41ef-9aeb-21ce44f61d10",
            "be850008-bb6e-4ca2-b86e-2e61f60cddeb",
            "c18c14a5-2e59-477a-aaa2-7aa5e1e32725",
            "5c1927b3-b15a-4442-b425-26d39d2b78b4",
            "f651cfa2-9f5d-4178-8406-c60f1c98f6b2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1312,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b515e332-7183-40a1-8c8e-3d7a0cce3434",
          "title": "Test Endpoint User /users",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success create user cashier",
              "fullTitle": "Test Endpoint User /users Success create user cashier",
              "timedOut": false,
              "duration": 416,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/users')\n    .send(addUser)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('User berhasil ditambahkan')\n        expect(await response.body.data.userId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(addUser.name)\n        userId = response.body.data.userId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "fa106073-ddf3-4d35-a9e3-e512680f5270",
              "parentUUID": "b515e332-7183-40a1-8c8e-3d7a0cce3434",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get user detail",
              "fullTitle": "Test Endpoint User /users Success get user detail",
              "timedOut": false,
              "duration": 144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/users/' + userId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.user.id).not.to.be.null\n        expect(await response.body.data.user.name).not.to.be.null\n        expect(await response.body.data.user.name).to.be.equal(addUser.name)\n        expect(await response.body.data.user.email).not.to.be.null\n        expect(await response.body.data.user.email).to.be.equal(addUser.email)\n        expect(await response.body.data.user.role).not.to.be.null\n        expect(await response.body.data.user.role).to.be.equal('kasir')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "373bc14e-a781-4084-915c-ec441cd13237",
              "parentUUID": "b515e332-7183-40a1-8c8e-3d7a0cce3434",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get user list",
              "fullTitle": "Test Endpoint User /users Success get user list",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/users')\n    .query({\n        q: 'kasir',\n        p: 1\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "74a77307-f508-4aa5-b5c6-7928e99816ca",
              "parentUUID": "b515e332-7183-40a1-8c8e-3d7a0cce3434",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update user",
              "fullTitle": "Test Endpoint User /users Success update user",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/users/' + userId)\n    .send(updateUser)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('User berhasil diupdate')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(updateUser.name)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "0ff5f67b-d72b-435c-8d77-defeede70413",
              "parentUUID": "b515e332-7183-40a1-8c8e-3d7a0cce3434",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete user",
              "fullTitle": "Test Endpoint User /users Success delete user",
              "timedOut": false,
              "duration": 93,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/users/' + userId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('User berhasil dihapus')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "ccb9fc20-bf9a-4d6b-b890-fdd5ca66840c",
              "parentUUID": "b515e332-7183-40a1-8c8e-3d7a0cce3434",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa106073-ddf3-4d35-a9e3-e512680f5270",
            "373bc14e-a781-4084-915c-ec441cd13237",
            "74a77307-f508-4aa5-b5c6-7928e99816ca",
            "0ff5f67b-d72b-435c-8d77-defeede70413",
            "ccb9fc20-bf9a-4d6b-b890-fdd5ca66840c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 871,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "44b27750-1c7a-4e4a-9540-01cf8258403a",
          "title": "Test Endpoint Unit /units",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success add unit",
              "fullTitle": "Test Endpoint Unit /units Success add unit",
              "timedOut": false,
              "duration": 127,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/units')\n    .send(addUnit)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Unit berhasil ditambahkan')\n        expect(await response.body.data.unitId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(addUnit.name)\n        unitId = response.body.data.unitId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "5570a419-788b-4b16-841d-cd72bfb4afbe",
              "parentUUID": "44b27750-1c7a-4e4a-9540-01cf8258403a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get unit detail",
              "fullTitle": "Test Endpoint Unit /units Success get unit detail",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/units/' + unitId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.unit.name).not.to.be.null\n        expect(await response.body.data.unit.name).to.be.equal(addUnit.name)\n        expect(await response.body.data.unit.description).not.to.be.null\n        expect(await response.body.data.unit.description).to.be.equal(addUnit.description)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "9adf8178-6afe-481b-80e1-102cdcd7ca65",
              "parentUUID": "44b27750-1c7a-4e4a-9540-01cf8258403a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get unit list",
              "fullTitle": "Test Endpoint Unit /units Success get unit list",
              "timedOut": false,
              "duration": 480,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/units')\n    .query({\n        q: 'gram',\n        page: 1\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "bda3944a-d301-4e1d-8c7f-b51f8081d802",
              "parentUUID": "44b27750-1c7a-4e4a-9540-01cf8258403a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update unit",
              "fullTitle": "Test Endpoint Unit /units Success update unit",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/units/' + unitId)\n    .send(updateUnit)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(updateUnit.name)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "a6987ace-05e0-4ac8-8686-c13ed453188e",
              "parentUUID": "44b27750-1c7a-4e4a-9540-01cf8258403a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete unit",
              "fullTitle": "Test Endpoint Unit /units Success delete unit",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/units/' + unitId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "908819a0-42a7-4f14-ab82-22f601d1d27b",
              "parentUUID": "44b27750-1c7a-4e4a-9540-01cf8258403a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5570a419-788b-4b16-841d-cd72bfb4afbe",
            "9adf8178-6afe-481b-80e1-102cdcd7ca65",
            "bda3944a-d301-4e1d-8c7f-b51f8081d802",
            "a6987ace-05e0-4ac8-8686-c13ed453188e",
            "908819a0-42a7-4f14-ab82-22f601d1d27b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 908,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4dd3bcd0-c062-46c8-963d-aa75189857e5",
          "title": "Test Endpoint Category /categories",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success add category",
              "fullTitle": "Test Endpoint Category /categories Success add category",
              "timedOut": false,
              "duration": 88,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/categories')\n    .send(addCategory)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Category berhasil ditambahkan')\n        expect(await response.body.data.categoryId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(addCategory.name)\n        categoryId = response.body.data.categoryId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "3f8bfc74-ade2-40b7-9131-2630f942ff70",
              "parentUUID": "4dd3bcd0-c062-46c8-963d-aa75189857e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get category detail",
              "fullTitle": "Test Endpoint Category /categories Success get category detail",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/categories/' + categoryId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.category.name).not.to.be.null\n        expect(await response.body.data.category.name).to.be.equal(addCategory.name)\n        expect(await response.body.data.category.description).not.to.be.null\n        expect(await response.body.data.category.description).to.be.equal(addCategory.description)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "c1cb0fca-0fc4-455a-94c8-86ca9ac1420c",
              "parentUUID": "4dd3bcd0-c062-46c8-963d-aa75189857e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get category list",
              "fullTitle": "Test Endpoint Category /categories Success get category list",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/categories')\n    .query({\n        page: 1,\n        q: 'makanan'\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "c4af2b61-fb39-4053-b475-de72838804dd",
              "parentUUID": "4dd3bcd0-c062-46c8-963d-aa75189857e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update category",
              "fullTitle": "Test Endpoint Category /categories Success update category",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/categories/' + categoryId)\n    .send(updateCategory)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(updateCategory.name)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "9eb9873a-e2d6-432f-bf16-1bf744558acb",
              "parentUUID": "4dd3bcd0-c062-46c8-963d-aa75189857e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete category",
              "fullTitle": "Test Endpoint Category /categories Success delete category",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/categories/' + categoryId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "e09b4a1d-6a48-4416-82c8-f6b535ffff0f",
              "parentUUID": "4dd3bcd0-c062-46c8-963d-aa75189857e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success add category again",
              "fullTitle": "Test Endpoint Category /categories Success add category again",
              "timedOut": false,
              "duration": 169,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/categories')\n    .send(addCategory)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Category berhasil ditambahkan')\n        expect(await response.body.data.categoryId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(addCategory.name)\n        categoryId = response.body.data.categoryId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "2201cef0-0a7a-484b-bef4-6d33f5e11025",
              "parentUUID": "4dd3bcd0-c062-46c8-963d-aa75189857e5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3f8bfc74-ade2-40b7-9131-2630f942ff70",
            "c1cb0fca-0fc4-455a-94c8-86ca9ac1420c",
            "c4af2b61-fb39-4053-b475-de72838804dd",
            "9eb9873a-e2d6-432f-bf16-1bf744558acb",
            "e09b4a1d-6a48-4416-82c8-f6b535ffff0f",
            "2201cef0-0a7a-484b-bef4-6d33f5e11025"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 706,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bd90b3f7-877f-4ac0-a510-83fd4d3e7453",
          "title": "Test Endpoint Customer /customers",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success add customer",
              "fullTitle": "Test Endpoint Customer /customers Success add customer",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/customers')\n    .send(addCustomer)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Customer berhasil ditambahkan')\n        expect(await response.body.data.customerId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(addCustomer.name)\n        customerId = response.body.data.customerId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "e8f4a644-6880-4058-9819-841eea7bf9ea",
              "parentUUID": "bd90b3f7-877f-4ac0-a510-83fd4d3e7453",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get customer detail",
              "fullTitle": "Test Endpoint Customer /customers Success get customer detail",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/customers/' + customerId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.customer.name).not.to.be.null\n        expect(await response.body.data.customer.name).to.be.equal(addCustomer.name)\n        expect(await response.body.data.customer.phone).not.to.be.null\n        expect(await response.body.data.customer.phone).to.be.equal(addCustomer.phone)\n        expect(await response.body.data.customer.address).not.to.be.null\n        expect(await response.body.data.customer.address).to.be.equal(addCustomer.address)\n        expect(await response.body.data.customer.description).not.to.be.null\n        expect(await response.body.data.customer.description).to.be.equal(addCustomer.description)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "35a45d9e-668c-4702-a11c-f7c6443f149a",
              "parentUUID": "bd90b3f7-877f-4ac0-a510-83fd4d3e7453",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get customer list",
              "fullTitle": "Test Endpoint Customer /customers Success get customer list",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/customers')\n    .query({\n        page: 1,\n        q: 'Budi'\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "ee0d9fe9-1763-4d5e-9bb2-421977b4577c",
              "parentUUID": "bd90b3f7-877f-4ac0-a510-83fd4d3e7453",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update customer",
              "fullTitle": "Test Endpoint Customer /customers Success update customer",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/customers/' + customerId)\n    .send(updateCustomer)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(updateCustomer.name)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "96f97ca2-6016-4c4d-ab5b-eaf9e641791f",
              "parentUUID": "bd90b3f7-877f-4ac0-a510-83fd4d3e7453",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete customer",
              "fullTitle": "Test Endpoint Customer /customers Success delete customer",
              "timedOut": false,
              "duration": 119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/customers/' + customerId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "cb35481f-a145-4928-ab54-61daacfc0281",
              "parentUUID": "bd90b3f7-877f-4ac0-a510-83fd4d3e7453",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success add customer again",
              "fullTitle": "Test Endpoint Customer /customers Success add customer again",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/customers')\n    .send(addCustomer)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Customer berhasil ditambahkan')\n        expect(await response.body.data.customerId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(addCustomer.name)\n        customerId = response.body.data.customerId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "968c7b6c-13ad-4247-99ee-6e4c1af81277",
              "parentUUID": "bd90b3f7-877f-4ac0-a510-83fd4d3e7453",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e8f4a644-6880-4058-9819-841eea7bf9ea",
            "35a45d9e-668c-4702-a11c-f7c6443f149a",
            "ee0d9fe9-1763-4d5e-9bb2-421977b4577c",
            "96f97ca2-6016-4c4d-ab5b-eaf9e641791f",
            "cb35481f-a145-4928-ab54-61daacfc0281",
            "968c7b6c-13ad-4247-99ee-6e4c1af81277"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 650,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f31150e7-6999-4e56-becb-99179abee30b",
          "title": "Test Endpoint Product /products",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success add product",
              "fullTitle": "Test Endpoint Product /products Success add product",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/products')\n    .send({\n        category_id: categoryId,\n        code: \"A314ASDDFIER3432\",\n        name: \"taro\",\n        price: 3500,\n        cost: 3000,\n        stock: 5\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Product berhasil ditambahkan')\n        expect(await response.body.data.productId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(\"taro\")\n        productId = response.body.data.productId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "d19b9f04-2291-4e71-9e57-71b8c23b02ec",
              "parentUUID": "f31150e7-6999-4e56-becb-99179abee30b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get product detail",
              "fullTitle": "Test Endpoint Product /products Success get product detail",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/products/' + productId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.product.code).not.to.be.null\n        expect(await response.body.data.product.name).not.to.be.null\n        expect(await response.body.data.product.name).to.be.equal(\"taro\")\n        expect(await response.body.data.product.price).not.to.be.null\n        expect(await response.body.data.product.price).to.be.equal(3500)\n        expect(await response.body.data.product.cost).not.to.be.null\n        expect(await response.body.data.product.cost).to.be.equal(3000)\n        expect(await response.body.data.product.stock).not.to.be.null\n        expect(await response.body.data.product.stock).to.be.equal(5)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "6ade0231-127c-465e-986b-645c0ee404ee",
              "parentUUID": "f31150e7-6999-4e56-becb-99179abee30b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get product list",
              "fullTitle": "Test Endpoint Product /products Success get product list",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/products')\n    .query({\n        page: 1,\n        q: \"taro\",\n        withStock: true,\n        withCategory: true,\n        categoryId: categoryId\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "9aedc41b-b9a5-4622-bb92-27f247c30577",
              "parentUUID": "f31150e7-6999-4e56-becb-99179abee30b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update product",
              "fullTitle": "Test Endpoint Product /products Success update product",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/products/' + productId)\n    .send({\n        \"category_id\": categoryId,\n        \"code\": \"A314ASDDFIER3432\",\n        \"name\": \"taro\",\n        \"price\": 3500,\n        \"cost\": 3000,\n        \"stock\": 100\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal('taro')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "89680a0f-8f8d-408c-92ca-d8ef5e8a8806",
              "parentUUID": "f31150e7-6999-4e56-becb-99179abee30b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete product",
              "fullTitle": "Test Endpoint Product /products Success delete product",
              "timedOut": false,
              "duration": 93,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/products/' + productId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "5225eea2-6779-4f84-8653-f4d6623cb10a",
              "parentUUID": "f31150e7-6999-4e56-becb-99179abee30b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success add product again",
              "fullTitle": "Test Endpoint Product /products Success add product again",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/products')\n    .send({\n        category_id: categoryId,\n        code: \"A314ASDDFIER3432\",\n        name: \"taro\",\n        price: 3500,\n        cost: 3000,\n        stock: 50\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Product berhasil ditambahkan')\n        expect(await response.body.data.productId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(\"taro\")\n        productId = response.body.data.productId\n        productCode = response.body.data.code\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "a2746437-ffc1-454a-ad01-89eeb8d608cc",
              "parentUUID": "f31150e7-6999-4e56-becb-99179abee30b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d19b9f04-2291-4e71-9e57-71b8c23b02ec",
            "6ade0231-127c-465e-986b-645c0ee404ee",
            "9aedc41b-b9a5-4622-bb92-27f247c30577",
            "89680a0f-8f8d-408c-92ca-d8ef5e8a8806",
            "5225eea2-6779-4f84-8653-f4d6623cb10a",
            "a2746437-ffc1-454a-ad01-89eeb8d608cc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 599,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "299b8b2b-fadf-44fd-ab15-93eaea491853",
          "title": "Test Endpoint Sales Order /sales and Transaction /purchases",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success add sales",
              "fullTitle": "Test Endpoint Sales Order /sales and Transaction /purchases Success add sales",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/sales')\n    .send({\n        \"officeId\": officeId,\n        \"customerId\": customerId,\n        \"date\": \"2023-02-01\",\n        \"invoice\": \"INV001\",\n        \"amount\": 2000,\n        \"discount\": 0,\n        \"description\": \"Pembelian pertama\",\n        \"items\": [\n            {\n                \"productId\": productId,\n                \"quantity\": 1,\n                \"price\": 2000\n            }\n        ]\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('transaksi ditambahkan')\n        expect(await response.body.data.saleId).not.to.be.null\n        saleId = response.body.data.saleId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "1847245c-58c9-4607-83e1-2261232a67ab",
              "parentUUID": "299b8b2b-fadf-44fd-ab15-93eaea491853",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get list sales data",
              "fullTitle": "Test Endpoint Sales Order /sales and Transaction /purchases Success get list sales data",
              "timedOut": false,
              "duration": 119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/sales')\n    .query({\n        startDate: \"2023-01-01\",\n        endDate: \"2023-12-31\"\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "3a52297a-c82a-4ada-ad43-83c83920c9a2",
              "parentUUID": "299b8b2b-fadf-44fd-ab15-93eaea491853",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get sales order data",
              "fullTitle": "Test Endpoint Sales Order /sales and Transaction /purchases Success get sales order data",
              "timedOut": false,
              "duration": 122,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/sales/' + saleId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        done()\n    })",
              "err": {},
              "uuid": "95889fd0-b65a-4adb-84e8-35b239e1121d",
              "parentUUID": "299b8b2b-fadf-44fd-ab15-93eaea491853",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success add transaction",
              "fullTitle": "Test Endpoint Sales Order /sales and Transaction /purchases Success add transaction",
              "timedOut": false,
              "duration": 94,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/purchases')\n    .send({\n        \"officeId\": officeId,\n        \"date\": \"2023-01-30\",\n        \"invoice\": \"INV/02/20/2023/001\",\n        \"amount\": 14000,\n        \"discount\": 0,\n        \"description\": \"test transaksi toko dwiky\",\n        \"items\": [\n            {\n                \"productId\": productId,\n                \"quantity\": 4,\n                \"cost\": 3500\n            }\n        ]\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('transaksi ditambahkan')\n        expect(await response.body.data.purchaseId).not.to.be.null\n        purchaseId = response.body.data.purchaseId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "d18fe0d6-4bdc-49c2-af66-b9aecfe16c30",
              "parentUUID": "299b8b2b-fadf-44fd-ab15-93eaea491853",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get list of transaction",
              "fullTitle": "Test Endpoint Sales Order /sales and Transaction /purchases Success get list of transaction",
              "timedOut": false,
              "duration": 101,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/purchases/' + purchaseId)\n    .query({\n        startDate: \"2023-01-01\",\n        endDate: \"2023-12-31\"\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.purchase.date).not.to.be.null\n        expect(await response.body.data.purchase.invoice).not.to.be.null\n        expect(await response.body.data.purchase.description).not.to.be.null\n        expect(await response.body.data.purchase.amount).not.to.be.null\n        expect(await response.body.data.purchase.discount).not.to.be.null\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "355e446f-f237-4bbe-97b2-95ab6daaa4f3",
              "parentUUID": "299b8b2b-fadf-44fd-ab15-93eaea491853",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get transaction detail",
              "fullTitle": "Test Endpoint Sales Order /sales and Transaction /purchases Success get transaction detail",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/purchases/' + purchaseId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.purchase.date).not.to.be.null\n        expect(await response.body.data.purchase.invoice).not.to.be.null\n        expect(await response.body.data.purchase.description).not.to.be.null\n        expect(await response.body.data.purchase.amount).not.to.be.null\n        expect(await response.body.data.purchase.discount).not.to.be.null\n        expect(await response.body.data.purchase.description).to.be.equal('test transaksi toko dwiky')\n        expect(await response.body.data.purchase.creator).to.be.equal('Toko Dwiky')\n        expect(await response.body.data.purchase.office_name).to.be.equal('office-Toko Dwiky')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "7e448ec2-179e-4f4a-8236-b7f9f257fe51",
              "parentUUID": "299b8b2b-fadf-44fd-ab15-93eaea491853",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1847245c-58c9-4607-83e1-2261232a67ab",
            "3a52297a-c82a-4ada-ad43-83c83920c9a2",
            "95889fd0-b65a-4adb-84e8-35b239e1121d",
            "d18fe0d6-4bdc-49c2-af66-b9aecfe16c30",
            "355e446f-f237-4bbe-97b2-95ab6daaa4f3",
            "7e448ec2-179e-4f4a-8236-b7f9f257fe51"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 637,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}