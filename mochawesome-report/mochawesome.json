{
  "stats": {
    "suites": 7,
    "tests": 39,
    "passes": 39,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-26T05:44:49.841Z",
    "end": "2023-06-26T05:45:17.565Z",
    "duration": 27724,
    "testsRegistered": 39,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "093f6fb4-26c9-456b-84f2-7a72b06e946a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 431,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "request(baseUrl)\n    .post('/authentications')\n    .send(userLogin)\n    .end(function (err, res) {\n        token = res.body.data.accessToken\n        if (err) {\n            throw err\n        }\n        done()\n    })",
          "err": {},
          "uuid": "7284b428-7d71-4ac2-8847-d3cdcd71b45b",
          "parentUUID": "093f6fb4-26c9-456b-84f2-7a72b06e946a",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "411df868-e70d-4b57-afcf-a7ba3d808c56",
          "title": "Test Endpoint Registration /registration and Login /authentications",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success create user registration",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Success create user registration",
              "timedOut": false,
              "duration": 423,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/registration')\n    .send(userRegistration)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Toko berhasil didaftarkan')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(userRegistration.name)\n        expect(await response.body.data.email).not.to.be.null\n        expect(await response.body.data.email).to.be.equal(userRegistration.email)\n        expect(await response.body.data.password).not.to.be.null\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "c9cf9061-7012-428e-99e4-5f1bc54e02a4",
              "parentUUID": "411df868-e70d-4b57-afcf-a7ba3d808c56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success login using valid credential",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Success login using valid credential",
              "timedOut": false,
              "duration": 456,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/authentications')\n    .send(userLogin)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Authentication berhasil ditambahkan')\n        expect(await response.body.data.accessToken).not.to.be.null\n        expect(await response.body.data.refreshToken).not.to.be.null\n        expect(await response.body.data.user.id).not.to.be.null\n        expect(await response.body.data.user.name).not.to.be.null\n        expect(await response.body.data.user.name).to.be.equal(userRegistration.name)\n        expect(await response.body.data.user.role).not.to.be.null\n        expect(await response.body.data.user.role).to.be.equal('admin')\n        expect(await response.body.data.user.email).not.to.be.null\n        expect(await response.body.data.user.email).to.be.equal(userRegistration.email)\n        expect(await response.body.data.user.company_name).not.to.be.null\n        expect(await response.body.data.user.company_name).to.be.equal(userRegistration.name)\n        officeId = response.body.data.user.officeId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "f61c53cd-a172-406d-8452-7b281fa858f8",
              "parentUUID": "411df868-e70d-4b57-afcf-a7ba3d808c56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed login using invalid credential",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Failed login using invalid credential",
              "timedOut": false,
              "duration": 342,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/authentications')\n    .send({\n        \"email\": \"tokonya@dwiky.com\",\n        \"password\": \"tokonyadwiky\"\n    })\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(401)\n        expect(await response.body.status).to.be.equal('fail')\n        expect(await response.body.message).to.be.equal('Kredensial yang Anda berikan salah')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "772093e3-da8d-4aec-a7d7-232fdd039e5d",
              "parentUUID": "411df868-e70d-4b57-afcf-a7ba3d808c56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed login using invalid email format",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Failed login using invalid email format",
              "timedOut": false,
              "duration": 138,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/authentications')\n    .send({\n        \"email\": \"toko@dwiky\",\n        \"password\": \"toko24dwiky\"\n    })\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(400)\n        expect(await response.body.status).to.be.equal('fail')\n        expect(await response.body.message).to.be.equal('\\\"email\\\" must be a valid email')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "3b3d6799-eaaa-4791-ada8-7a9c63b55629",
              "parentUUID": "411df868-e70d-4b57-afcf-a7ba3d808c56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed login without any input",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Failed login without any input",
              "timedOut": false,
              "duration": 445,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/authentications')\n    .send()\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(400)\n        expect(await response.body.status).to.be.equal('fail')\n        expect(await response.body.message).to.be.equal('\\\"value\\\" must be of type object')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "9981be80-cdbc-4a04-ab0b-c9d129825549",
              "parentUUID": "411df868-e70d-4b57-afcf-a7ba3d808c56",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c9cf9061-7012-428e-99e4-5f1bc54e02a4",
            "f61c53cd-a172-406d-8452-7b281fa858f8",
            "772093e3-da8d-4aec-a7d7-232fdd039e5d",
            "3b3d6799-eaaa-4791-ada8-7a9c63b55629",
            "9981be80-cdbc-4a04-ab0b-c9d129825549"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1804,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5483c6b0-4077-4013-b297-fd6be63354ad",
          "title": "Test Endpoint User /users",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success create user cashier",
              "fullTitle": "Test Endpoint User /users Success create user cashier",
              "timedOut": false,
              "duration": 446,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/users')\n    .send(createUser)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('User berhasil ditambahkan')\n        expect(await response.body.data.userId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(createUser.name)\n        userId = response.body.data.userId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "ed843119-4382-4542-8de3-7d9546b6d495",
              "parentUUID": "5483c6b0-4077-4013-b297-fd6be63354ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get user detail",
              "fullTitle": "Test Endpoint User /users Success get user detail",
              "timedOut": false,
              "duration": 1144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/users/' + userId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.data.user.id).not.to.be.null\n        expect(await response.body.data.user.name).not.to.be.null\n        expect(await response.body.data.user.name).to.be.equal(createUser.name)\n        expect(await response.body.data.user.email).not.to.be.null\n        expect(await response.body.data.user.email).to.be.equal(createUser.email)\n        expect(await response.body.data.user.role).not.to.be.null\n        expect(await response.body.data.user.role).to.be.equal('kasir')\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "6f4738fd-4718-4a01-b2bf-40085892fa73",
              "parentUUID": "5483c6b0-4077-4013-b297-fd6be63354ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get user list",
              "fullTitle": "Test Endpoint User /users Success get user list",
              "timedOut": false,
              "duration": 122,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/users')\n    .query({\n        q: 'kasir',\n        p: 1\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "71fd6dce-7cf0-492b-9432-d7558dab73e9",
              "parentUUID": "5483c6b0-4077-4013-b297-fd6be63354ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update user",
              "fullTitle": "Test Endpoint User /users Success update user",
              "timedOut": false,
              "duration": 159,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/users/' + userId)\n    .send(updateUser)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(updateUser.name)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('User berhasil diupdate')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "29efc4f1-c955-4af9-ab28-f665a356c30c",
              "parentUUID": "5483c6b0-4077-4013-b297-fd6be63354ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete user",
              "fullTitle": "Test Endpoint User /users Success delete user",
              "timedOut": false,
              "duration": 116,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/users/' + userId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('User berhasil dihapus')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "5d1254aa-0da8-409b-aa37-47cb08902234",
              "parentUUID": "5483c6b0-4077-4013-b297-fd6be63354ad",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ed843119-4382-4542-8de3-7d9546b6d495",
            "6f4738fd-4718-4a01-b2bf-40085892fa73",
            "71fd6dce-7cf0-492b-9432-d7558dab73e9",
            "29efc4f1-c955-4af9-ab28-f665a356c30c",
            "5d1254aa-0da8-409b-aa37-47cb08902234"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1987,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3d8a9068-9833-4943-8e28-0a866fa57573",
          "title": "Test Endpoint Unit /units",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success add unit",
              "fullTitle": "Test Endpoint Unit /units Success add unit",
              "timedOut": false,
              "duration": 125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/units')\n    .send(addUnit)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Unit berhasil ditambahkan')\n        expect(await response.body.data.unitId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(addUnit.name)\n        unitId = response.body.data.unitId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "bfc1b3d3-2e5e-47a2-940d-3457f860d3ce",
              "parentUUID": "3d8a9068-9833-4943-8e28-0a866fa57573",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get unit detail",
              "fullTitle": "Test Endpoint Unit /units Success get unit detail",
              "timedOut": false,
              "duration": 103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/units/' + unitId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.unit.name).not.to.be.null\n        expect(await response.body.data.unit.name).to.be.equal(addUnit.name)\n        expect(await response.body.data.unit.description).not.to.be.null\n        expect(await response.body.data.unit.description).to.be.equal(addUnit.description)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "e658195c-d074-4f91-b816-36bea2308be4",
              "parentUUID": "3d8a9068-9833-4943-8e28-0a866fa57573",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get unit list",
              "fullTitle": "Test Endpoint Unit /units Success get unit list",
              "timedOut": false,
              "duration": 155,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/units')\n    .query({\n        q: 'gram',\n        page: 1\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "444d6d05-fdea-4ed3-8c8e-fe63a6d9366d",
              "parentUUID": "3d8a9068-9833-4943-8e28-0a866fa57573",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update unit",
              "fullTitle": "Test Endpoint Unit /units Success update unit",
              "timedOut": false,
              "duration": 183,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/units/' + unitId)\n    .send(updateUnit)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(updateUnit.name)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "856ab08d-7168-4d0d-b0f8-4be5f2025206",
              "parentUUID": "3d8a9068-9833-4943-8e28-0a866fa57573",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete unit",
              "fullTitle": "Test Endpoint Unit /units Success delete unit",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/units/' + unitId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "a5a17be6-8236-4689-8a90-709b601adfb6",
              "parentUUID": "3d8a9068-9833-4943-8e28-0a866fa57573",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bfc1b3d3-2e5e-47a2-940d-3457f860d3ce",
            "e658195c-d074-4f91-b816-36bea2308be4",
            "444d6d05-fdea-4ed3-8c8e-fe63a6d9366d",
            "856ab08d-7168-4d0d-b0f8-4be5f2025206",
            "a5a17be6-8236-4689-8a90-709b601adfb6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 672,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "13d458e0-6fde-44a3-b01b-34c1f71184a4",
          "title": "Test Endpoint Category /categories",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success add category",
              "fullTitle": "Test Endpoint Category /categories Success add category",
              "timedOut": false,
              "duration": 110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/categories')\n    .send(addCategory)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.data.categoryId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(addCategory.name)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Category berhasil ditambahkan')\n        categoryId = response.body.data.categoryId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "695a8b2f-05d5-4a56-ab21-dc56deaee60d",
              "parentUUID": "13d458e0-6fde-44a3-b01b-34c1f71184a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get category detail",
              "fullTitle": "Test Endpoint Category /categories Success get category detail",
              "timedOut": false,
              "duration": 167,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/categories/' + categoryId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.data.category.name).not.to.be.null\n        expect(await response.body.data.category.name).to.be.equal(addCategory.name)\n        expect(await response.body.data.category.description).not.to.be.null\n        expect(await response.body.data.category.description).to.be.equal(addCategory.description)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "c117f2c4-4fe4-48f2-b399-bb3f895a698d",
              "parentUUID": "13d458e0-6fde-44a3-b01b-34c1f71184a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get category list",
              "fullTitle": "Test Endpoint Category /categories Success get category list",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/categories')\n    .query({\n        page: 1,\n        q: 'makanan'\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "bf65341e-e5c5-4906-80e1-88fa93005001",
              "parentUUID": "13d458e0-6fde-44a3-b01b-34c1f71184a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update category",
              "fullTitle": "Test Endpoint Category /categories Success update category",
              "timedOut": false,
              "duration": 146,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/categories/' + categoryId)\n    .send(updateCategory)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(updateCategory.name)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "cd7cf4fd-23ad-43e6-889a-deda284c4c9d",
              "parentUUID": "13d458e0-6fde-44a3-b01b-34c1f71184a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete category",
              "fullTitle": "Test Endpoint Category /categories Success delete category",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/categories/' + categoryId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "05e0bcd7-5595-4eab-a804-9b5675d9c435",
              "parentUUID": "13d458e0-6fde-44a3-b01b-34c1f71184a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success add category again",
              "fullTitle": "Test Endpoint Category /categories Success add category again",
              "timedOut": false,
              "duration": 150,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/categories')\n    .send(addCategory)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.data.categoryId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(addCategory.name)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Category berhasil ditambahkan')\n        categoryId = response.body.data.categoryId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "d82496d1-51c9-4bd2-9e9f-ca6942779968",
              "parentUUID": "13d458e0-6fde-44a3-b01b-34c1f71184a4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "695a8b2f-05d5-4a56-ab21-dc56deaee60d",
            "c117f2c4-4fe4-48f2-b399-bb3f895a698d",
            "bf65341e-e5c5-4906-80e1-88fa93005001",
            "cd7cf4fd-23ad-43e6-889a-deda284c4c9d",
            "05e0bcd7-5595-4eab-a804-9b5675d9c435",
            "d82496d1-51c9-4bd2-9e9f-ca6942779968"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 780,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a3d7d26c-e9d2-461a-b4d9-1f1dc46aeeeb",
          "title": "Test Endpoint Customer /customers",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success add customer",
              "fullTitle": "Test Endpoint Customer /customers Success add customer",
              "timedOut": false,
              "duration": 149,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/customers')\n    .send(addCustomer)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Customer berhasil ditambahkan')\n        expect(await response.body.data.customerId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(addCustomer.name)\n        customerId = response.body.data.customerId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "c8adede3-2d46-4f7e-a071-0b642e50c46e",
              "parentUUID": "a3d7d26c-e9d2-461a-b4d9-1f1dc46aeeeb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get customer detail",
              "fullTitle": "Test Endpoint Customer /customers Success get customer detail",
              "timedOut": false,
              "duration": 125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/customers/' + customerId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.customer.name).not.to.be.null\n        expect(await response.body.data.customer.name).to.be.equal(addCustomer.name)\n        expect(await response.body.data.customer.phone).not.to.be.null\n        expect(await response.body.data.customer.phone).to.be.equal(addCustomer.phone)\n        expect(await response.body.data.customer.address).not.to.be.null\n        expect(await response.body.data.customer.address).to.be.equal(addCustomer.address)\n        expect(await response.body.data.customer.description).not.to.be.null\n        expect(await response.body.data.customer.description).to.be.equal(addCustomer.description)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "b9a584a9-e4f5-42c0-8208-0e97e21f7922",
              "parentUUID": "a3d7d26c-e9d2-461a-b4d9-1f1dc46aeeeb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get customer list",
              "fullTitle": "Test Endpoint Customer /customers Success get customer list",
              "timedOut": false,
              "duration": 126,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/customers')\n    .query({\n        page: 1,\n        q: 'Budi'\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "789bc203-92b8-47a7-97ba-114319776a32",
              "parentUUID": "a3d7d26c-e9d2-461a-b4d9-1f1dc46aeeeb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update customer",
              "fullTitle": "Test Endpoint Customer /customers Success update customer",
              "timedOut": false,
              "duration": 207,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/customers/' + customerId)\n    .send(updateCustomer)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(updateCustomer.name)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "83efd848-87dc-411a-a550-82b7a0bc62c6",
              "parentUUID": "a3d7d26c-e9d2-461a-b4d9-1f1dc46aeeeb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete customer",
              "fullTitle": "Test Endpoint Customer /customers Success delete customer",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/customers/' + customerId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "0ba13497-b077-44a7-9b21-172da8999fd7",
              "parentUUID": "a3d7d26c-e9d2-461a-b4d9-1f1dc46aeeeb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success add customer again",
              "fullTitle": "Test Endpoint Customer /customers Success add customer again",
              "timedOut": false,
              "duration": 101,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/customers')\n    .send(addCustomer)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Customer berhasil ditambahkan')\n        expect(await response.body.data.customerId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(addCustomer.name)\n        customerId = response.body.data.customerId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "f52445a5-0c1d-4a05-bf23-de074c401996",
              "parentUUID": "a3d7d26c-e9d2-461a-b4d9-1f1dc46aeeeb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c8adede3-2d46-4f7e-a071-0b642e50c46e",
            "b9a584a9-e4f5-42c0-8208-0e97e21f7922",
            "789bc203-92b8-47a7-97ba-114319776a32",
            "83efd848-87dc-411a-a550-82b7a0bc62c6",
            "0ba13497-b077-44a7-9b21-172da8999fd7",
            "f52445a5-0c1d-4a05-bf23-de074c401996"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 813,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7298ae06-f251-48c3-be3e-89cc093af2c2",
          "title": "Test Endpoint Product /products",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success add product",
              "fullTitle": "Test Endpoint Product /products Success add product",
              "timedOut": false,
              "duration": 147,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/products')\n    .send({\n        category_id: categoryId,\n        code: \"A314ASDDFIER3432\",\n        name: \"taro\",\n        price: 3500,\n        cost: 3000,\n        stock: 5\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Product berhasil ditambahkan')\n        expect(await response.body.data.productId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(\"taro\")\n        productId = response.body.data.productId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "e74a751b-2b86-4989-ae0c-98f2fe6f60e4",
              "parentUUID": "7298ae06-f251-48c3-be3e-89cc093af2c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get product detail",
              "fullTitle": "Test Endpoint Product /products Success get product detail",
              "timedOut": false,
              "duration": 130,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/products/' + productId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.product.code).not.to.be.null\n        expect(await response.body.data.product.name).not.to.be.null\n        expect(await response.body.data.product.name).to.be.equal(\"taro\")\n        expect(await response.body.data.product.price).not.to.be.null\n        expect(await response.body.data.product.price).to.be.equal(3500)\n        expect(await response.body.data.product.cost).not.to.be.null\n        expect(await response.body.data.product.cost).to.be.equal(3000)\n        expect(await response.body.data.product.stock).not.to.be.null\n        expect(await response.body.data.product.stock).to.be.equal(5)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "d6e077d7-7d4f-4c26-ab56-61064f431499",
              "parentUUID": "7298ae06-f251-48c3-be3e-89cc093af2c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get product list",
              "fullTitle": "Test Endpoint Product /products Success get product list",
              "timedOut": false,
              "duration": 110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/products')\n    .query({\n        page: 1,\n        q: \"taro\",\n        withStock: true,\n        withCategory: true,\n        categoryId: categoryId\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "d5ee60a9-a23c-4af9-b64f-febe62aa2878",
              "parentUUID": "7298ae06-f251-48c3-be3e-89cc093af2c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update product",
              "fullTitle": "Test Endpoint Product /products Success update product",
              "timedOut": false,
              "duration": 90,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/products/' + productId)\n    .send({\n        \"category_id\": categoryId,\n        \"code\": \"A314ASDDFIER3432\",\n        \"name\": \"taro\",\n        \"price\": 3500,\n        \"cost\": 3000,\n        \"stock\": 100\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal('taro')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "3f027c30-0f44-4efe-8c45-b8a1d4bf5930",
              "parentUUID": "7298ae06-f251-48c3-be3e-89cc093af2c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete product",
              "fullTitle": "Test Endpoint Product /products Success delete product",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/products/' + productId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "69a0d923-8b70-4e06-8ccf-d79aa7a6080e",
              "parentUUID": "7298ae06-f251-48c3-be3e-89cc093af2c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success add product again",
              "fullTitle": "Test Endpoint Product /products Success add product again",
              "timedOut": false,
              "duration": 124,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/products')\n    .send({\n        category_id: categoryId,\n        code: \"A314ASDDFIER3432\",\n        name: \"taro\",\n        price: 3500,\n        cost: 3000,\n        stock: 50\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Product berhasil ditambahkan')\n        expect(await response.body.data.productId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(\"taro\")\n        productId = response.body.data.productId\n        productCode = response.body.data.code\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "e66a2c89-37d1-47bf-ba93-9ff3e43d5f2d",
              "parentUUID": "7298ae06-f251-48c3-be3e-89cc093af2c2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e74a751b-2b86-4989-ae0c-98f2fe6f60e4",
            "d6e077d7-7d4f-4c26-ab56-61064f431499",
            "d5ee60a9-a23c-4af9-b64f-febe62aa2878",
            "3f027c30-0f44-4efe-8c45-b8a1d4bf5930",
            "69a0d923-8b70-4e06-8ccf-d79aa7a6080e",
            "e66a2c89-37d1-47bf-ba93-9ff3e43d5f2d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 715,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a9bbed2c-ad9d-42dd-86c8-fd574660a286",
          "title": "Test Endpoint Sales Order /sales and Transaction /purchases",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success add sales",
              "fullTitle": "Test Endpoint Sales Order /sales and Transaction /purchases Success add sales",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/sales')\n    .send({\n        \"officeId\": officeId,\n        \"customerId\": customerId,\n        \"date\": \"2023-02-01\",\n        \"invoice\": \"INV001\",\n        \"amount\": 2000,\n        \"discount\": 0,\n        \"description\": \"Pembelian pertama\",\n        \"items\": [\n            {\n                \"productId\": productId,\n                \"quantity\": 1,\n                \"price\": 2000\n            }\n        ]\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('transaksi ditambahkan')\n        expect(await response.body.data.saleId).not.to.be.null\n        saleId = response.body.data.saleId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "7fad3715-e528-478b-80a8-d07cac382f29",
              "parentUUID": "a9bbed2c-ad9d-42dd-86c8-fd574660a286",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get list sales data",
              "fullTitle": "Test Endpoint Sales Order /sales and Transaction /purchases Success get list sales data",
              "timedOut": false,
              "duration": 138,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/sales')\n    .query({\n        startDate: \"2023-01-01\",\n        endDate: \"2023-12-31\"\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "facaffe6-5f01-4d71-ba69-3d9e0dff9866",
              "parentUUID": "a9bbed2c-ad9d-42dd-86c8-fd574660a286",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get sales order data",
              "fullTitle": "Test Endpoint Sales Order /sales and Transaction /purchases Success get sales order data",
              "timedOut": false,
              "duration": 136,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/sales/' + saleId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        done()\n    })",
              "err": {},
              "uuid": "5efa1f6b-0b54-457e-a367-074f561d8e88",
              "parentUUID": "a9bbed2c-ad9d-42dd-86c8-fd574660a286",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success add transaction",
              "fullTitle": "Test Endpoint Sales Order /sales and Transaction /purchases Success add transaction",
              "timedOut": false,
              "duration": 110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/purchases')\n    .send({\n        \"officeId\": officeId,\n        \"date\": \"2023-01-30\",\n        \"invoice\": \"INV/02/20/2023/001\",\n        \"amount\": 14000,\n        \"discount\": 0,\n        \"description\": \"test transaksi toko dwiky\",\n        \"items\": [\n            {\n                \"productId\": productId,\n                \"quantity\": 4,\n                \"cost\": 3500\n            }\n        ]\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('transaksi ditambahkan')\n        expect(await response.body.data.purchaseId).not.to.be.null\n        purchaseId = response.body.data.purchaseId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "5a320039-1d5b-4175-92a7-eae5149f4215",
              "parentUUID": "a9bbed2c-ad9d-42dd-86c8-fd574660a286",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get list of transaction",
              "fullTitle": "Test Endpoint Sales Order /sales and Transaction /purchases Success get list of transaction",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/purchases/' + purchaseId)\n    .query({\n        startDate: \"2023-01-01\",\n        endDate: \"2023-12-31\"\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.purchase.date).not.to.be.null\n        expect(await response.body.data.purchase.invoice).not.to.be.null\n        expect(await response.body.data.purchase.description).not.to.be.null\n        expect(await response.body.data.purchase.amount).not.to.be.null\n        expect(await response.body.data.purchase.discount).not.to.be.null\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "c2f6296b-7c3c-4c8e-ba4f-a4af8a553df7",
              "parentUUID": "a9bbed2c-ad9d-42dd-86c8-fd574660a286",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get transaction detail",
              "fullTitle": "Test Endpoint Sales Order /sales and Transaction /purchases Success get transaction detail",
              "timedOut": false,
              "duration": 1134,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/purchases/' + purchaseId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.purchase.date).not.to.be.null\n        expect(await response.body.data.purchase.invoice).not.to.be.null\n        expect(await response.body.data.purchase.description).not.to.be.null\n        expect(await response.body.data.purchase.amount).not.to.be.null\n        expect(await response.body.data.purchase.discount).not.to.be.null\n        expect(await response.body.data.purchase.description).to.be.equal('test transaksi toko dwiky')\n        expect(await response.body.data.purchase.creator).to.be.equal('Toko Dwiky')\n        expect(await response.body.data.purchase.office_name).to.be.equal('office-Toko Dwiky')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "fed8374d-916c-4a5c-abb7-b05668134130",
              "parentUUID": "a9bbed2c-ad9d-42dd-86c8-fd574660a286",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7fad3715-e528-478b-80a8-d07cac382f29",
            "facaffe6-5f01-4d71-ba69-3d9e0dff9866",
            "5efa1f6b-0b54-457e-a367-074f561d8e88",
            "5a320039-1d5b-4175-92a7-eae5149f4215",
            "c2f6296b-7c3c-4c8e-ba4f-a4af8a553df7",
            "fed8374d-916c-4a5c-abb7-b05668134130"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1752,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}