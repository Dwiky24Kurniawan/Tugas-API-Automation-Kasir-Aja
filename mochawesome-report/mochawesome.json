{
  "stats": {
    "suites": 7,
    "tests": 39,
    "passes": 39,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-26T05:02:51.925Z",
    "end": "2023-06-26T05:03:14.180Z",
    "duration": 22255,
    "testsRegistered": 39,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2a1c6778-e965-43fe-a2fe-fe71f3053267",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 427,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "request(baseUrl)\n    .post('/authentications')\n    .send(userLogin)\n    .end(function (err, res) {\n        token = res.body.data.accessToken\n        if (err) {\n            throw err\n        }\n        done()\n    })",
          "err": {},
          "uuid": "d2a86ba3-3ca9-4ea1-bae0-60f50b4a6168",
          "parentUUID": "2a1c6778-e965-43fe-a2fe-fe71f3053267",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b2f8292e-b0be-41c8-b520-78acad5cf7fe",
          "title": "Test Endpoint Registration /registration and Login /authentications",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success create user registration",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Success create user registration",
              "timedOut": false,
              "duration": 412,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/registration')\n    .send(userRegistration)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Toko berhasil didaftarkan')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(userRegistration.name)\n        expect(await response.body.data.email).not.to.be.null\n        expect(await response.body.data.email).to.be.equal(userRegistration.email)\n        expect(await response.body.data.password).not.to.be.null\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "af036319-bc99-4ebe-b9ba-81971fb93801",
              "parentUUID": "b2f8292e-b0be-41c8-b520-78acad5cf7fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success login using valid credential",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Success login using valid credential",
              "timedOut": false,
              "duration": 424,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/authentications')\n    .send(userLogin)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Authentication berhasil ditambahkan')\n        expect(await response.body.data.accessToken).not.to.be.null\n        expect(await response.body.data.refreshToken).not.to.be.null\n        expect(await response.body.data.user.id).not.to.be.null\n        expect(await response.body.data.user.name).not.to.be.null\n        expect(await response.body.data.user.name).to.be.equal(userRegistration.name)\n        expect(await response.body.data.user.role).not.to.be.null\n        expect(await response.body.data.user.role).to.be.equal('admin')\n        expect(await response.body.data.user.email).not.to.be.null\n        expect(await response.body.data.user.email).to.be.equal(userRegistration.email)\n        expect(await response.body.data.user.company_name).not.to.be.null\n        expect(await response.body.data.user.company_name).to.be.equal(userRegistration.name)\n        officeId = response.body.data.user.officeId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "c861c156-553b-4198-b199-0dff66aedd42",
              "parentUUID": "b2f8292e-b0be-41c8-b520-78acad5cf7fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed login using invalid credential",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Failed login using invalid credential",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/authentications')\n    .send({\n        \"email\": \"tokonya@dwiky.com\",\n        \"password\": \"tokonyadwiky\"\n    })\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(401)\n        expect(await response.body.status).to.be.equal('fail')\n        expect(await response.body.message).to.be.equal('Kredensial yang Anda berikan salah')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "da86f4ce-e863-4bb2-ac6f-826847cf9281",
              "parentUUID": "b2f8292e-b0be-41c8-b520-78acad5cf7fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed login using invalid email format",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Failed login using invalid email format",
              "timedOut": false,
              "duration": 91,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/authentications')\n    .send({\n        \"email\": \"toko@dwiky\",\n        \"password\": \"toko24dwiky\"\n    })\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(400)\n        expect(await response.body.status).to.be.equal('fail')\n        expect(await response.body.message).to.be.equal('\\\"email\\\" must be a valid email')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "002bb85c-dd84-4c05-9022-d532af0e702c",
              "parentUUID": "b2f8292e-b0be-41c8-b520-78acad5cf7fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Failed login without any input",
              "fullTitle": "Test Endpoint Registration /registration and Login /authentications Failed login without any input",
              "timedOut": false,
              "duration": 137,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/authentications')\n    .send()\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(400)\n        expect(await response.body.status).to.be.equal('fail')\n        expect(await response.body.message).to.be.equal('\\\"value\\\" must be of type object')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "db0a666f-7369-4f5b-af37-1a9cf7d2b3d2",
              "parentUUID": "b2f8292e-b0be-41c8-b520-78acad5cf7fe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "af036319-bc99-4ebe-b9ba-81971fb93801",
            "c861c156-553b-4198-b199-0dff66aedd42",
            "da86f4ce-e863-4bb2-ac6f-826847cf9281",
            "002bb85c-dd84-4c05-9022-d532af0e702c",
            "db0a666f-7369-4f5b-af37-1a9cf7d2b3d2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1177,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ce4ff1d6-74a5-4acb-9eef-1e4ef525fa4a",
          "title": "Test Endpoint User /users",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success create user cashier",
              "fullTitle": "Test Endpoint User /users Success create user cashier",
              "timedOut": false,
              "duration": 409,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/users')\n    .send(createUser)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('User berhasil ditambahkan')\n        expect(await response.body.data.userId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(createUser.name)\n        userId = response.body.data.userId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "3d986b46-2a54-4cb3-93a8-547b49979e28",
              "parentUUID": "ce4ff1d6-74a5-4acb-9eef-1e4ef525fa4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get user detail",
              "fullTitle": "Test Endpoint User /users Success get user detail",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/users/' + userId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.data.user.id).not.to.be.null\n        expect(await response.body.data.user.name).not.to.be.null\n        expect(await response.body.data.user.name).to.be.equal(createUser.name)\n        expect(await response.body.data.user.email).not.to.be.null\n        expect(await response.body.data.user.email).to.be.equal(createUser.email)\n        expect(await response.body.data.user.role).not.to.be.null\n        expect(await response.body.data.user.role).to.be.equal('kasir')\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "68b35f06-ef65-4308-a191-857535b2c9a9",
              "parentUUID": "ce4ff1d6-74a5-4acb-9eef-1e4ef525fa4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get user list",
              "fullTitle": "Test Endpoint User /users Success get user list",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/users')\n    .query({\n        q: 'kasir',\n        p: 1\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "4f823bb6-7cd4-4053-91c2-f06b263db8dd",
              "parentUUID": "ce4ff1d6-74a5-4acb-9eef-1e4ef525fa4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update user",
              "fullTitle": "Test Endpoint User /users Success update user",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/users/' + userId)\n    .send(updateUser)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(updateUser.name)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('User berhasil diupdate')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "96f61e5a-927f-4f54-89c1-11f2b47a0c58",
              "parentUUID": "ce4ff1d6-74a5-4acb-9eef-1e4ef525fa4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete user",
              "fullTitle": "Test Endpoint User /users Success delete user",
              "timedOut": false,
              "duration": 93,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/users/' + userId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('User berhasil dihapus')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "0b7a1de2-6d7e-4d47-9401-1e15eef0b071",
              "parentUUID": "ce4ff1d6-74a5-4acb-9eef-1e4ef525fa4a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3d986b46-2a54-4cb3-93a8-547b49979e28",
            "68b35f06-ef65-4308-a191-857535b2c9a9",
            "4f823bb6-7cd4-4053-91c2-f06b263db8dd",
            "96f61e5a-927f-4f54-89c1-11f2b47a0c58",
            "0b7a1de2-6d7e-4d47-9401-1e15eef0b071"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 828,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "27690d76-469e-4cd1-9eb6-0eac2c638875",
          "title": "Test Endpoint Unit /units",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success add unit",
              "fullTitle": "Test Endpoint Unit /units Success add unit",
              "timedOut": false,
              "duration": 93,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/units')\n    .send(addUnit)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Unit berhasil ditambahkan')\n        expect(await response.body.data.unitId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(addUnit.name)\n        unitId = response.body.data.unitId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "8a2e8597-74b9-4d48-a1fc-0c39d18f8c0b",
              "parentUUID": "27690d76-469e-4cd1-9eb6-0eac2c638875",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get unit detail",
              "fullTitle": "Test Endpoint Unit /units Success get unit detail",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/units/' + unitId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.unit.name).not.to.be.null\n        expect(await response.body.data.unit.name).to.be.equal(addUnit.name)\n        expect(await response.body.data.unit.description).not.to.be.null\n        expect(await response.body.data.unit.description).to.be.equal(addUnit.description)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "331c988a-6179-419f-bd52-b270ef4e8feb",
              "parentUUID": "27690d76-469e-4cd1-9eb6-0eac2c638875",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get unit list",
              "fullTitle": "Test Endpoint Unit /units Success get unit list",
              "timedOut": false,
              "duration": 109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/units')\n    .query({\n        q: 'gram',\n        page: 1\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "5d22b2fd-ce6c-47b0-8e10-493022f21323",
              "parentUUID": "27690d76-469e-4cd1-9eb6-0eac2c638875",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update unit",
              "fullTitle": "Test Endpoint Unit /units Success update unit",
              "timedOut": false,
              "duration": 92,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/units/' + unitId)\n    .send(updateUnit)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(updateUnit.name)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "75906297-41e3-4dc2-8d17-f0e2232c474f",
              "parentUUID": "27690d76-469e-4cd1-9eb6-0eac2c638875",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete unit",
              "fullTitle": "Test Endpoint Unit /units Success delete unit",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/units/' + unitId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "c55b75a7-eb1a-486e-bf3f-a1f0eb010111",
              "parentUUID": "27690d76-469e-4cd1-9eb6-0eac2c638875",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8a2e8597-74b9-4d48-a1fc-0c39d18f8c0b",
            "331c988a-6179-419f-bd52-b270ef4e8feb",
            "5d22b2fd-ce6c-47b0-8e10-493022f21323",
            "75906297-41e3-4dc2-8d17-f0e2232c474f",
            "c55b75a7-eb1a-486e-bf3f-a1f0eb010111"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 485,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ddabb491-d2a0-4a7f-829e-f4c9c4aabcc0",
          "title": "Test Endpoint Category /categories",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success add category",
              "fullTitle": "Test Endpoint Category /categories Success add category",
              "timedOut": false,
              "duration": 91,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/categories')\n    .send(addCategory)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.data.categoryId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(addCategory.name)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Category berhasil ditambahkan')\n        categoryId = response.body.data.categoryId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "8497c37a-51a6-4968-bb03-6552d8a974eb",
              "parentUUID": "ddabb491-d2a0-4a7f-829e-f4c9c4aabcc0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get category detail",
              "fullTitle": "Test Endpoint Category /categories Success get category detail",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/categories/' + categoryId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.data.category.name).not.to.be.null\n        expect(await response.body.data.category.name).to.be.equal(addCategory.name)\n        expect(await response.body.data.category.description).not.to.be.null\n        expect(await response.body.data.category.description).to.be.equal(addCategory.description)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "a836a3d1-7886-4b14-91fc-c49fdd0859c5",
              "parentUUID": "ddabb491-d2a0-4a7f-829e-f4c9c4aabcc0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get category list",
              "fullTitle": "Test Endpoint Category /categories Success get category list",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/categories')\n    .query({\n        page: 1,\n        q: 'makanan'\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "f0629da2-4ee3-4df0-b3d1-fd810bb16f2d",
              "parentUUID": "ddabb491-d2a0-4a7f-829e-f4c9c4aabcc0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update category",
              "fullTitle": "Test Endpoint Category /categories Success update category",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/categories/' + categoryId)\n    .send(updateCategory)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(updateCategory.name)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "0c9d7e3b-1255-4644-9b0d-98e58ab374fe",
              "parentUUID": "ddabb491-d2a0-4a7f-829e-f4c9c4aabcc0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete category",
              "fullTitle": "Test Endpoint Category /categories Success delete category",
              "timedOut": false,
              "duration": 115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/categories/' + categoryId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "05cebfb8-67e5-4218-98c3-aa747e239784",
              "parentUUID": "ddabb491-d2a0-4a7f-829e-f4c9c4aabcc0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success add category again",
              "fullTitle": "Test Endpoint Category /categories Success add category again",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/categories')\n    .send(addCategory)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.data.categoryId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(addCategory.name)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Category berhasil ditambahkan')\n        categoryId = response.body.data.categoryId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "37940cbe-2a65-4ac3-a357-20856541a793",
              "parentUUID": "ddabb491-d2a0-4a7f-829e-f4c9c4aabcc0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8497c37a-51a6-4968-bb03-6552d8a974eb",
            "a836a3d1-7886-4b14-91fc-c49fdd0859c5",
            "f0629da2-4ee3-4df0-b3d1-fd810bb16f2d",
            "0c9d7e3b-1255-4644-9b0d-98e58ab374fe",
            "05cebfb8-67e5-4218-98c3-aa747e239784",
            "37940cbe-2a65-4ac3-a357-20856541a793"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 620,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2fec3952-3ce7-4be0-89cb-76ce474c3555",
          "title": "Test Endpoint Customer /customers",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success add customer",
              "fullTitle": "Test Endpoint Customer /customers Success add customer",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/customers')\n    .send(addCustomer)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Customer berhasil ditambahkan')\n        expect(await response.body.data.customerId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(addCustomer.name)\n        customerId = response.body.data.customerId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "ae504b50-b5ab-4428-98c1-6d1cea39fcd9",
              "parentUUID": "2fec3952-3ce7-4be0-89cb-76ce474c3555",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get customer detail",
              "fullTitle": "Test Endpoint Customer /customers Success get customer detail",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/customers/' + customerId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.customer.name).not.to.be.null\n        expect(await response.body.data.customer.name).to.be.equal(addCustomer.name)\n        expect(await response.body.data.customer.phone).not.to.be.null\n        expect(await response.body.data.customer.phone).to.be.equal(addCustomer.phone)\n        expect(await response.body.data.customer.address).not.to.be.null\n        expect(await response.body.data.customer.address).to.be.equal(addCustomer.address)\n        expect(await response.body.data.customer.description).not.to.be.null\n        expect(await response.body.data.customer.description).to.be.equal(addCustomer.description)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "be3987f0-eb6e-47ec-a760-6cab51a0d947",
              "parentUUID": "2fec3952-3ce7-4be0-89cb-76ce474c3555",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get customer list",
              "fullTitle": "Test Endpoint Customer /customers Success get customer list",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/customers')\n    .query({\n        page: 1,\n        q: 'Budi'\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "882a3d45-76fa-4e74-9063-5319044bccf7",
              "parentUUID": "2fec3952-3ce7-4be0-89cb-76ce474c3555",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update customer",
              "fullTitle": "Test Endpoint Customer /customers Success update customer",
              "timedOut": false,
              "duration": 103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/customers/' + customerId)\n    .send(updateCustomer)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(updateCustomer.name)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "99923ea2-9821-4529-9916-2279d79faf87",
              "parentUUID": "2fec3952-3ce7-4be0-89cb-76ce474c3555",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete customer",
              "fullTitle": "Test Endpoint Customer /customers Success delete customer",
              "timedOut": false,
              "duration": 92,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/customers/' + customerId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "8112e8ab-e8ce-4abe-bbe5-1781bbca4b79",
              "parentUUID": "2fec3952-3ce7-4be0-89cb-76ce474c3555",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success add customer again",
              "fullTitle": "Test Endpoint Customer /customers Success add customer again",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/customers')\n    .send(addCustomer)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Customer berhasil ditambahkan')\n        expect(await response.body.data.customerId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(addCustomer.name)\n        customerId = response.body.data.customerId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "1c3af40d-b485-4729-ab74-fdad21aa499d",
              "parentUUID": "2fec3952-3ce7-4be0-89cb-76ce474c3555",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ae504b50-b5ab-4428-98c1-6d1cea39fcd9",
            "be3987f0-eb6e-47ec-a760-6cab51a0d947",
            "882a3d45-76fa-4e74-9063-5319044bccf7",
            "99923ea2-9821-4529-9916-2279d79faf87",
            "8112e8ab-e8ce-4abe-bbe5-1781bbca4b79",
            "1c3af40d-b485-4729-ab74-fdad21aa499d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 601,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4bf80722-576a-4721-a95a-58908dca1e49",
          "title": "Test Endpoint Product /products",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success add product",
              "fullTitle": "Test Endpoint Product /products Success add product",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/products')\n    .send({\n        category_id: categoryId,\n        code: \"A314ASDDFIER3432\",\n        name: \"taro\",\n        price: 3500,\n        cost: 3000,\n        stock: 5\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Product berhasil ditambahkan')\n        expect(await response.body.data.productId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(\"taro\")\n        productId = response.body.data.productId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "5f91c11d-a998-4901-9cc1-f80c612332f2",
              "parentUUID": "4bf80722-576a-4721-a95a-58908dca1e49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get product detail",
              "fullTitle": "Test Endpoint Product /products Success get product detail",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/products/' + productId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.product.code).not.to.be.null\n        expect(await response.body.data.product.name).not.to.be.null\n        expect(await response.body.data.product.name).to.be.equal(\"taro\")\n        expect(await response.body.data.product.price).not.to.be.null\n        expect(await response.body.data.product.price).to.be.equal(3500)\n        expect(await response.body.data.product.cost).not.to.be.null\n        expect(await response.body.data.product.cost).to.be.equal(3000)\n        expect(await response.body.data.product.stock).not.to.be.null\n        expect(await response.body.data.product.stock).to.be.equal(5)\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "ac842b76-81c5-43ce-8493-acc701adbbf4",
              "parentUUID": "4bf80722-576a-4721-a95a-58908dca1e49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get product list",
              "fullTitle": "Test Endpoint Product /products Success get product list",
              "timedOut": false,
              "duration": 103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/products')\n    .query({\n        page: 1,\n        q: \"taro\",\n        withStock: true,\n        withCategory: true,\n        categoryId: categoryId\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "0cd394be-0324-4340-9af1-d976ef34f27e",
              "parentUUID": "4bf80722-576a-4721-a95a-58908dca1e49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success update product",
              "fullTitle": "Test Endpoint Product /products Success update product",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .put('/products/' + productId)\n    .send({\n        \"category_id\": categoryId,\n        \"code\": \"A314ASDDFIER3432\",\n        \"name\": \"taro\",\n        \"price\": 3500,\n        \"cost\": 3000,\n        \"stock\": 100\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal('taro')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "47dde552-2152-4ea8-b1ca-a68dae214897",
              "parentUUID": "4bf80722-576a-4721-a95a-58908dca1e49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success delete product",
              "fullTitle": "Test Endpoint Product /products Success delete product",
              "timedOut": false,
              "duration": 126,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .del('/products/' + productId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "fa1e95e6-8b1f-4fcf-b1e4-fbf130361dea",
              "parentUUID": "4bf80722-576a-4721-a95a-58908dca1e49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success add product again",
              "fullTitle": "Test Endpoint Product /products Success add product again",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/products')\n    .send({\n        category_id: categoryId,\n        code: \"A314ASDDFIER3432\",\n        name: \"taro\",\n        price: 3500,\n        cost: 3000,\n        stock: 50\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('Product berhasil ditambahkan')\n        expect(await response.body.data.productId).not.to.be.null\n        expect(await response.body.data.name).not.to.be.null\n        expect(await response.body.data.name).to.be.equal(\"taro\")\n        productId = response.body.data.productId\n        productCode = response.body.data.code\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "c4d970be-7dc6-4d7e-95e2-bf0a4c997037",
              "parentUUID": "4bf80722-576a-4721-a95a-58908dca1e49",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5f91c11d-a998-4901-9cc1-f80c612332f2",
            "ac842b76-81c5-43ce-8493-acc701adbbf4",
            "0cd394be-0324-4340-9af1-d976ef34f27e",
            "47dde552-2152-4ea8-b1ca-a68dae214897",
            "fa1e95e6-8b1f-4fcf-b1e4-fbf130361dea",
            "c4d970be-7dc6-4d7e-95e2-bf0a4c997037"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 637,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3595802c-fb62-42a2-aa0d-0412b34637ec",
          "title": "Test Endpoint Sales Order /sales and Transaction /purchases",
          "fullFile": "D:\\SANBERCODE\\QA-AUTOMATION\\TUGAS-API-AUTOMATION\\Tugas-API-Automation-Kasir-Aja\\test\\testKasirAjaAPI.js",
          "file": "\\test\\testKasirAjaAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Success add sales",
              "fullTitle": "Test Endpoint Sales Order /sales and Transaction /purchases Success add sales",
              "timedOut": false,
              "duration": 109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/sales')\n    .send({\n        \"officeId\": officeId,\n        \"customerId\": customerId,\n        \"date\": \"2023-02-01\",\n        \"invoice\": \"INV001\",\n        \"amount\": 2000,\n        \"discount\": 0,\n        \"description\": \"Pembelian pertama\",\n        \"items\": [\n            {\n                \"productId\": productId,\n                \"quantity\": 1,\n                \"price\": 2000\n            }\n        ]\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('transaksi ditambahkan')\n        expect(await response.body.data.saleId).not.to.be.null\n        saleId = response.body.data.saleId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "6af291e8-19cd-4e33-9732-8ed99bf7cfff",
              "parentUUID": "3595802c-fb62-42a2-aa0d-0412b34637ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get list sales data",
              "fullTitle": "Test Endpoint Sales Order /sales and Transaction /purchases Success get list sales data",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/sales')\n    .query({\n        startDate: \"2023-01-01\",\n        endDate: \"2023-12-31\"\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "518b18f2-86ef-448a-8d65-13c038a30cee",
              "parentUUID": "3595802c-fb62-42a2-aa0d-0412b34637ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get sales order data",
              "fullTitle": "Test Endpoint Sales Order /sales and Transaction /purchases Success get sales order data",
              "timedOut": false,
              "duration": 124,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/sales/' + saleId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        console.log(JSON.stringify(response.body))\n        done()\n    })",
              "err": {},
              "uuid": "e680ebb2-4e5e-4708-83f3-bc736fb48e88",
              "parentUUID": "3595802c-fb62-42a2-aa0d-0412b34637ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success add transaction",
              "fullTitle": "Test Endpoint Sales Order /sales and Transaction /purchases Success add transaction",
              "timedOut": false,
              "duration": 133,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .post('/purchases')\n    .send({\n        \"officeId\": officeId,\n        \"date\": \"2023-01-30\",\n        \"invoice\": \"INV/02/20/2023/001\",\n        \"amount\": 14000,\n        \"discount\": 0,\n        \"description\": \"test transaksi toko dwiky\",\n        \"items\": [\n            {\n                \"productId\": productId,\n                \"quantity\": 4,\n                \"cost\": 3500\n            }\n        ]\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(201)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.message).to.be.equal('transaksi ditambahkan')\n        expect(await response.body.data.purchaseId).not.to.be.null\n        purchaseId = response.body.data.purchaseId\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "ccd62259-4eef-471c-aa58-5c5b953cef72",
              "parentUUID": "3595802c-fb62-42a2-aa0d-0412b34637ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get list of transaction",
              "fullTitle": "Test Endpoint Sales Order /sales and Transaction /purchases Success get list of transaction",
              "timedOut": false,
              "duration": 136,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/purchases/' + purchaseId)\n    .query({\n        startDate: \"2023-01-01\",\n        endDate: \"2023-12-31\"\n    })\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.purchase.date).not.to.be.null\n        expect(await response.body.data.purchase.invoice).not.to.be.null\n        expect(await response.body.data.purchase.description).not.to.be.null\n        expect(await response.body.data.purchase.amount).not.to.be.null\n        expect(await response.body.data.purchase.discount).not.to.be.null\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "7cb9d99b-ef6a-471b-8776-60e21175ff29",
              "parentUUID": "3595802c-fb62-42a2-aa0d-0412b34637ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Success get transaction detail",
              "fullTitle": "Test Endpoint Sales Order /sales and Transaction /purchases Success get transaction detail",
              "timedOut": false,
              "duration": 190,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request(baseUrl)\n    .get('/purchases/' + purchaseId)\n    .set('Accept', 'application/json')\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'bearer ' + token)\n    .end(async function (err, response) {\n        expect(await response.statusCode).to.be.equal(200)\n        expect(await response.body.status).to.be.equal('success')\n        expect(await response.body.data.purchase.date).not.to.be.null\n        expect(await response.body.data.purchase.invoice).not.to.be.null\n        expect(await response.body.data.purchase.description).not.to.be.null\n        expect(await response.body.data.purchase.amount).not.to.be.null\n        expect(await response.body.data.purchase.discount).not.to.be.null\n        expect(await response.body.data.purchase.description).to.be.equal('test transaksi toko dwiky')\n        expect(await response.body.data.purchase.creator).to.be.equal('Toko Dwiky')\n        expect(await response.body.data.purchase.office_name).to.be.equal('office-Toko Dwiky')\n        console.log(JSON.stringify(response.body))\n        if (err) {\n            throw err\n        }\n        done()\n    })",
              "err": {},
              "uuid": "d852c59e-7085-44a9-9b6a-7d8213b7d54f",
              "parentUUID": "3595802c-fb62-42a2-aa0d-0412b34637ec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6af291e8-19cd-4e33-9732-8ed99bf7cfff",
            "518b18f2-86ef-448a-8d65-13c038a30cee",
            "e680ebb2-4e5e-4708-83f3-bc736fb48e88",
            "ccd62259-4eef-471c-aa58-5c5b953cef72",
            "7cb9d99b-ef6a-471b-8776-60e21175ff29",
            "d852c59e-7085-44a9-9b6a-7d8213b7d54f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 806,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}